name: Build pyodide wheels

on:
  # push:
  #   tags:
  #     - "py-core-v*"
  workflow_dispatch:
    inputs:
      python:
        description: "Python version"
        required: true
        default: "3.12"
        type: choice
        options:
          - 3.12
          - 3.13
          - 3.14
          - 3.15
      pyodide:
        description: "New Pyodide version to build for"
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - arro3-core
          - arro3-compute
          - arro3-io
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-emscripten

      - uses: Swatinem/rust-cache@v2

      - name: Install Python build dependencies
        run: pip install maturin pyodide-build==${{ inputs.pyodide }}

      - name: Get emscripten version
        run: |
          PYODIDE_EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version)
          echo "PYODIDE_EMSCRIPTEN_VERSION=$PYODIDE_EMSCRIPTEN_VERSION" >> $GITHUB_ENV

      - name: Install emsdk ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
          actions-cache-folder: "emsdk-cache"

      - name: Build wheels
        run: |
          RUSTUP_TOOLCHAIN=nightly maturin build --release -o dist --target wasm32-unknown-emscripten -i python${{ inputs.python  }} --manifest-path ${{ matrix.module }}/Cargo.toml

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-pyodide-${{ matrix.module }}
          path: dist

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: pyodide-v${{ inputs.pyodide }}
          name: Build of arro3 for pyodide v${{ inputs.pyodide}}
          artifacts: dist/*
          replacesArtifacts: true
          allowUpdates: true
          updateOnlyUnreleased: true
          prerelease: true
