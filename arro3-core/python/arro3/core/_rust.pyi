from typing import Self
from numpy.typing import NDArray

from .types import ArrowArrayExportable, ArrowSchemaExportable, ArrowStreamExportable

class Array:
    def __array__(self) -> NDArray: ...
    def __arrow_c_array__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowArrayExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, schema_capsule, array_capsule) -> Self: ...
    def to_numpy(self) -> NDArray: ...

class ChunkedArray:
    def __array__(self) -> NDArray: ...
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Self: ...
    def to_numpy(self) -> NDArray: ...

class Field:
    def __arrow_c_schema__(self) -> object: ...
    def __eq__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowSchemaExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Self: ...

class RecordBatch:
    def __arrow_c_array__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowArrayExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, schema_capsule, array_capsule) -> Self: ...

class RecordBatchReader:
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Self: ...
    def schema(self) -> Schema: ...

class Schema:
    def __arrow_c_schema__(self) -> object: ...
    def __eq__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowSchemaExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Self: ...

class Table:
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> Self: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Self: ...
    def schema(self) -> Schema: ...
