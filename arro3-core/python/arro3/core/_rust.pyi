from typing import Sequence
from numpy.typing import NDArray

from .types import (
    ArrowArrayExportable,
    ArrowSchemaExportable,
    ArrowStreamExportable,
    FieldIndexInput,
    MetadataInput,
)

class Array:
    def __array__(self) -> NDArray: ...
    def __arrow_c_array__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowArrayExportable) -> Array: ...
    @classmethod
    def from_arrow_pycapsule(cls, schema_capsule, array_capsule) -> Array: ...
    def to_numpy(self) -> NDArray: ...
    def slice(self, offset: int = 0, length: int | None = None) -> Array: ...
    @property
    def type(self) -> DataType: ...

class ChunkedArray:
    def __array__(self) -> NDArray: ...
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> ChunkedArray: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> ChunkedArray: ...
    def to_numpy(self) -> NDArray: ...

class DataType:
    def __arrow_c_schema__(self) -> object: ...
    def __eq__(self) -> bool: ...
    def __repr__(self) -> str: ...
    @classmethod
    def from_arrow(cls, input: ArrowSchemaExportable) -> DataType: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> DataType: ...
    def bit_width(self) -> int | None: ...

class Field:
    def __init__(
        self,
        name: str,
        type: ArrowSchemaExportable,
        nullable: bool = True,
        *,
        metadata: MetadataInput | None = None,
    ) -> None: ...
    def __arrow_c_schema__(self) -> object: ...
    def __eq__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowSchemaExportable) -> Field: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Field: ...
    def equals(self, other: ArrowSchemaExportable) -> bool: ...
    @property
    def metadata(self) -> dict[bytes, bytes]: ...
    @property
    def metadata_str(self) -> dict[str, str]: ...
    @property
    def name(self) -> str: ...
    @property
    def nullable(self) -> bool: ...
    def remove_metadata(self) -> Field: ...
    @property
    def type(self) -> DataType: ...
    def with_metadata(self, metadata: MetadataInput) -> Field: ...
    def with_name(self, name: str) -> Field: ...
    def with_nullable(self, nullable: bool) -> Field: ...
    def with_type(self, new_type: ArrowSchemaExportable) -> Field: ...

class RecordBatch:
    def __arrow_c_array__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...

    # TODO: add new methods from record batch

    @classmethod
    def from_arrow(cls, input: ArrowArrayExportable) -> RecordBatch: ...
    @classmethod
    def from_arrow_pycapsule(cls, schema_capsule, array_capsule) -> RecordBatch: ...
    def column(self, i: int) -> ChunkedArray: ...
    def num_columns(self) -> int: ...
    def schema(self) -> Schema: ...

class RecordBatchReader:
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> RecordBatchReader: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> RecordBatchReader: ...
    def schema(self) -> Schema: ...

class Schema:
    def __init__(
        self,
        fields: Sequence[ArrowSchemaExportable],
        *,
        metadata: MetadataInput | None = None,
    ) -> None: ...
    def __arrow_c_schema__(self) -> object: ...
    def __eq__(self, other: ArrowSchemaExportable) -> bool: ...
    def __repr__(self) -> str: ...
    @classmethod
    def from_arrow(cls, input: ArrowSchemaExportable) -> Schema: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Schema: ...
    def append(self, field: ArrowSchemaExportable) -> Schema: ...
    def empty_table(self) -> Table: ...
    def equals(self, other: ArrowSchemaExportable) -> bool: ...
    def field(self, i: FieldIndexInput) -> Field: ...
    def get_all_field_indices(self, name: str) -> list[int]: ...
    def get_field_index(self, name: str) -> int: ...
    def insert(self, i: int, field: ArrowSchemaExportable) -> Schema: ...
    @property
    def metadata(self) -> dict[bytes, bytes]: ...
    @property
    def metadata_str(self) -> dict[str, str]: ...
    @property
    def names(self) -> list[str]: ...
    def remove(self, i: int) -> Schema: ...
    def remove_metadata(self) -> Schema: ...
    def set(self, i: int, field: ArrowSchemaExportable) -> Schema: ...
    @property
    def types(self) -> list[DataType]: ...
    def with_metadata(self, metadata: MetadataInput) -> Schema: ...

class Table:
    def __arrow_c_stream__(self, requested_schema) -> object: ...
    def __eq__(self) -> bool: ...
    def __len__(self) -> bool: ...
    @classmethod
    def from_arrow(cls, input: ArrowStreamExportable) -> Table: ...
    @classmethod
    def from_arrow_pycapsule(cls, capsule) -> Table: ...
    def column(self, i: int) -> ChunkedArray: ...
    def num_columns(self) -> int: ...
    def schema(self) -> Schema: ...
