{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"arro3","text":"<p>A minimal Python library for Apache Arrow, binding to the Rust Arrow implementation.</p>"},{"location":"#why-another-arrow-library","title":"Why another Arrow library?","text":"<p>pyarrow is the reference Arrow implementation in Python, but there are a few reasons for <code>arro3</code> to exist:</p> <ul> <li>Lightweight. pyarrow is 100MB on disk, plus 35MB for its required numpy dependency. <code>arro3-core</code> is around 1MB on disk with no required dependencies.</li> <li>Minimal. The core library (<code>arro3-core</code>) has a very small scope. Other functionality, such as compute kernels, will be distributed in other namespace packages.</li> <li>Modular. The Arrow PyCapsule Interface makes it easier to create small Arrow libraries that communicate via zero-copy data transfer. arro3's Python functions accept Arrow data from any Python Arrow library that implements the PyCapsule interface, including <code>pyarrow</code> and <code>nanoarrow</code>.</li> <li>Extensible. Over time, can connect to compute kernels provided by the Rust Arrow implementation.</li> <li>Compliant. Full support for the Arrow specification, including extension types. (Limited to what the Arrow Rust crate supports, which does not yet support Arrow view types.)</li> </ul>"},{"location":"#drawbacks","title":"Drawbacks","text":"<p>In general, arro3 isn't designed for constructing arrow data from other formats, but should enable users to manage arrow data created by other Arrow-compatible libraries. arro3 does not implement conversion of arbitrary Python objects to Arrow. This is complex and well served by other libraries (e.g. pyarrow).</p>"},{"location":"#using-from-rust","title":"Using from Rust","text":"<p>Refer to pyo3-arrow documentation.</p>"},{"location":"api/","title":"arro3.core","text":""},{"location":"api/#arro3.core","title":"arro3.core","text":""},{"location":"api/#arro3.core.Array","title":"Array","text":"<p>A Python-facing Arrow array.</p> <p>This is a wrapper around an [ArrayRef] and a [FieldRef].</p>"},{"location":"api/#arro3.core.Array.__arrow_c_array__","title":"__arrow_c_array__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_array__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/#arro3.core.Array.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowArrayExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>).</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowArrayExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/#arro3.core.Array.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(schema_capsule, array_capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/#arro3.core.Array.to_numpy","title":"to_numpy  <code>method descriptor</code>","text":"<pre><code>to_numpy() -&gt; NDArray\n</code></pre> <p>Copy this array to a <code>numpy</code> NDArray</p>"},{"location":"api/#arro3.core.ChunkedArray","title":"ChunkedArray","text":"<p>A Python-facing Arrow chunked array.</p> <p>This is a wrapper around a [FieldRef] and a <code>Vec</code> of [ArrayRef].</p>"},{"location":"api/#arro3.core.ChunkedArray.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example (as of the upcoming pyarrow v16), you can call <code>pyarrow.chunked_array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/#arro3.core.ChunkedArray.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>). All batches will be materialized in memory.</p>"},{"location":"api/#arro3.core.ChunkedArray.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/#arro3.core.ChunkedArray.to_numpy","title":"to_numpy  <code>method descriptor</code>","text":"<pre><code>to_numpy() -&gt; NDArray\n</code></pre> <p>Copy this array to a <code>numpy</code> NDArray</p>"},{"location":"api/#arro3.core.Field","title":"Field","text":"<p>A Python-facing Arrow field.</p> <p>This is a wrapper around a [FieldRef].</p>"},{"location":"api/#arro3.core.Field.__arrow_c_schema__","title":"__arrow_c_schema__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_schema__() -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.field()</code> to convert this array into a pyarrow field, without copying memory.</p>"},{"location":"api/#arro3.core.Field.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowSchemaExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow schema interface (<code>__arrow_c_schema__</code>).</p>"},{"location":"api/#arro3.core.Field.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/#arro3.core.RecordBatch","title":"RecordBatch","text":"<p>A Python-facing Arrow record batch.</p> <p>This is a wrapper around a [RecordBatch].</p>"},{"location":"api/#arro3.core.RecordBatch.__arrow_c_array__","title":"__arrow_c_array__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_array__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/#arro3.core.RecordBatch.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowArrayExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow RecordBatch.</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>) and returns a StructArray..</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowArrayExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/#arro3.core.RecordBatch.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(schema_capsule, array_capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/#arro3.core.RecordBatchReader","title":"RecordBatchReader","text":"<p>A Python-facing Arrow record batch reader.</p> <p>This is a wrapper around a [RecordBatchReader].</p>"},{"location":"api/#arro3.core.RecordBatchReader.schema","title":"schema","text":"<pre><code>schema = &lt;attribute 'schema' of 'arro3.core._rust.RecordBatchReader' objects&gt;\n</code></pre> <p>Access the schema of this table</p>"},{"location":"api/#arro3.core.RecordBatchReader.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.table()</code> to convert this array into a pyarrow table, without copying memory.</p>"},{"location":"api/#arro3.core.RecordBatchReader.closed","title":"closed  <code>method descriptor</code>","text":"<pre><code>closed()\n</code></pre> <p>Returns <code>true</code> if this reader has already been consumed.</p>"},{"location":"api/#arro3.core.RecordBatchReader.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>), such as a <code>Table</code> or <code>RecordBatchReader</code>.</p>"},{"location":"api/#arro3.core.RecordBatchReader.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule.</p>"},{"location":"api/#arro3.core.Schema","title":"Schema","text":"<p>A Python-facing Arrow schema.</p> <p>This is a wrapper around a [SchemaRef].</p>"},{"location":"api/#arro3.core.Schema.__arrow_c_schema__","title":"__arrow_c_schema__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_schema__() -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.schema()</code> to convert this array into a pyarrow schema, without copying memory.</p>"},{"location":"api/#arro3.core.Schema.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowSchemaExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>) and returns a struct field.</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowSchemaExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/#arro3.core.Schema.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/#arro3.core.Table","title":"Table","text":"<p>A Python-facing Arrow table.</p> <p>This is a wrapper around a [SchemaRef] and a <code>Vec</code> of [RecordBatch].</p>"},{"location":"api/#arro3.core.Table.num_columns","title":"num_columns","text":"<pre><code>num_columns = &lt;attribute 'num_columns' of 'arro3.core._rust.Table' objects&gt;\n</code></pre> <p>Number of columns in this table.</p>"},{"location":"api/#arro3.core.Table.schema","title":"schema","text":"<pre><code>schema = &lt;attribute 'schema' of 'arro3.core._rust.Table' objects&gt;\n</code></pre> <p>Access the schema of this table</p>"},{"location":"api/#arro3.core.Table.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.table()</code> to convert this array into a pyarrow table, without copying memory.</p>"},{"location":"api/#arro3.core.Table.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>) and yields a StructArray for each item. This Table will materialize all items from the iterator in memory at once. Use RecordBatchReader if you don't wish to materialize all batches in memory at once.</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowStreamExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/#arro3.core.Table.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/array/","title":"arro3.core.Array","text":""},{"location":"api/array/#arro3.core.Array","title":"arro3.core.Array","text":"<p>A Python-facing Arrow array.</p> <p>This is a wrapper around an [ArrayRef] and a [FieldRef].</p>"},{"location":"api/array/#arro3.core.Array.__arrow_c_array__","title":"__arrow_c_array__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_array__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/array/#arro3.core.Array.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowArrayExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>).</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowArrayExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/array/#arro3.core.Array.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(schema_capsule, array_capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/array/#arro3.core.Array.to_numpy","title":"to_numpy  <code>method descriptor</code>","text":"<pre><code>to_numpy() -&gt; NDArray\n</code></pre> <p>Copy this array to a <code>numpy</code> NDArray</p>"},{"location":"api/chunked-array/","title":"arro3.core.ChunkedArray","text":""},{"location":"api/chunked-array/#arro3.core.ChunkedArray","title":"arro3.core.ChunkedArray","text":"<p>A Python-facing Arrow chunked array.</p> <p>This is a wrapper around a [FieldRef] and a <code>Vec</code> of [ArrayRef].</p>"},{"location":"api/chunked-array/#arro3.core.ChunkedArray.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example (as of the upcoming pyarrow v16), you can call <code>pyarrow.chunked_array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/chunked-array/#arro3.core.ChunkedArray.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>). All batches will be materialized in memory.</p>"},{"location":"api/chunked-array/#arro3.core.ChunkedArray.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/chunked-array/#arro3.core.ChunkedArray.to_numpy","title":"to_numpy  <code>method descriptor</code>","text":"<pre><code>to_numpy() -&gt; NDArray\n</code></pre> <p>Copy this array to a <code>numpy</code> NDArray</p>"},{"location":"api/field/","title":"arro3.core.Field","text":""},{"location":"api/field/#arro3.core.Field","title":"arro3.core.Field","text":"<p>A Python-facing Arrow field.</p> <p>This is a wrapper around a [FieldRef].</p>"},{"location":"api/field/#arro3.core.Field.__arrow_c_schema__","title":"__arrow_c_schema__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_schema__() -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.field()</code> to convert this array into a pyarrow field, without copying memory.</p>"},{"location":"api/field/#arro3.core.Field.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowSchemaExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow schema interface (<code>__arrow_c_schema__</code>).</p>"},{"location":"api/field/#arro3.core.Field.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/record-batch-reader/","title":"arro3.core.RecordBatchReader","text":""},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader","title":"arro3.core.RecordBatchReader","text":"<p>A Python-facing Arrow record batch reader.</p> <p>This is a wrapper around a [RecordBatchReader].</p>"},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader.schema","title":"schema","text":"<pre><code>schema = &lt;attribute 'schema' of 'arro3.core._rust.RecordBatchReader' objects&gt;\n</code></pre> <p>Access the schema of this table</p>"},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.table()</code> to convert this array into a pyarrow table, without copying memory.</p>"},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader.closed","title":"closed  <code>method descriptor</code>","text":"<pre><code>closed()\n</code></pre> <p>Returns <code>true</code> if this reader has already been consumed.</p>"},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>), such as a <code>Table</code> or <code>RecordBatchReader</code>.</p>"},{"location":"api/record-batch-reader/#arro3.core.RecordBatchReader.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule.</p>"},{"location":"api/record-batch/","title":"arro3.core.RecordBatch","text":""},{"location":"api/record-batch/#arro3.core.RecordBatch","title":"arro3.core.RecordBatch","text":"<p>A Python-facing Arrow record batch.</p> <p>This is a wrapper around a [RecordBatch].</p>"},{"location":"api/record-batch/#arro3.core.RecordBatch.__arrow_c_array__","title":"__arrow_c_array__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_array__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.array()</code> to convert this array into a pyarrow array, without copying memory.</p>"},{"location":"api/record-batch/#arro3.core.RecordBatch.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowArrayExportable) -&gt; Self\n</code></pre> <p>Construct this from an existing Arrow RecordBatch.</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>) and returns a StructArray..</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowArrayExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/record-batch/#arro3.core.RecordBatch.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(schema_capsule, array_capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/schema/","title":"arro3.core.Schema","text":""},{"location":"api/schema/#arro3.core.Schema","title":"arro3.core.Schema","text":"<p>A Python-facing Arrow schema.</p> <p>This is a wrapper around a [SchemaRef].</p>"},{"location":"api/schema/#arro3.core.Schema.__arrow_c_schema__","title":"__arrow_c_schema__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_schema__() -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.schema()</code> to convert this array into a pyarrow schema, without copying memory.</p>"},{"location":"api/schema/#arro3.core.Schema.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowSchemaExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object</p> <p>It can be called on anything that exports the Arrow data interface (<code>__arrow_c_array__</code>) and returns a struct field.</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowSchemaExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/schema/#arro3.core.Schema.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/table/","title":"arro3.core.Table","text":""},{"location":"api/table/#arro3.core.Table","title":"arro3.core.Table","text":"<p>A Python-facing Arrow table.</p> <p>This is a wrapper around a [SchemaRef] and a <code>Vec</code> of [RecordBatch].</p>"},{"location":"api/table/#arro3.core.Table.num_columns","title":"num_columns","text":"<pre><code>num_columns = &lt;attribute 'num_columns' of 'arro3.core._rust.Table' objects&gt;\n</code></pre> <p>Number of columns in this table.</p>"},{"location":"api/table/#arro3.core.Table.schema","title":"schema","text":"<pre><code>schema = &lt;attribute 'schema' of 'arro3.core._rust.Table' objects&gt;\n</code></pre> <p>Access the schema of this table</p>"},{"location":"api/table/#arro3.core.Table.__arrow_c_stream__","title":"__arrow_c_stream__  <code>method descriptor</code>","text":"<pre><code>__arrow_c_stream__(requested_schema=None) -&gt; object\n</code></pre> <p>An implementation of the Arrow PyCapsule Interface. This dunder method should not be called directly, but enables zero-copy data transfer to other Python libraries that understand Arrow memory.</p> <p>For example, you can call <code>pyarrow.table()</code> to convert this array into a pyarrow table, without copying memory.</p>"},{"location":"api/table/#arro3.core.Table.from_arrow","title":"from_arrow  <code>builtin</code>","text":"<pre><code>from_arrow(input: ArrowStreamExportable) -&gt; Self\n</code></pre> <p>Construct this object from an existing Arrow object.</p> <p>It can be called on anything that exports the Arrow stream interface (<code>__arrow_c_stream__</code>) and yields a StructArray for each item. This Table will materialize all items from the iterator in memory at once. Use RecordBatchReader if you don't wish to materialize all batches in memory at once.</p> <p>Parameters:</p> <ul> <li> <code>input</code>               (<code>ArrowStreamExportable</code>)           \u2013            <p>Arrow array to use for constructing this object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self</p> </li> </ul>"},{"location":"api/table/#arro3.core.Table.from_arrow_pycapsule","title":"from_arrow_pycapsule  <code>builtin</code>","text":"<pre><code>from_arrow_pycapsule(capsule) -&gt; Self\n</code></pre> <p>Construct this object from a bare Arrow PyCapsule</p>"},{"location":"api/types/","title":"arro3.core.types","text":""},{"location":"api/types/#arro3.core.types","title":"arro3.core.types","text":""},{"location":"api/types/#arro3.core.types.ArrowArrayExportable","title":"ArrowArrayExportable","text":"<p>               Bases: <code>Protocol</code></p> <p>A C-level reference to an Arrow Array or RecordBatch.</p>"},{"location":"api/types/#arro3.core.types.ArrowSchemaExportable","title":"ArrowSchemaExportable","text":"<p>               Bases: <code>Protocol</code></p> <p>A C-level reference to an Arrow Schema or Field.</p>"},{"location":"api/types/#arro3.core.types.ArrowStreamExportable","title":"ArrowStreamExportable","text":"<p>               Bases: <code>Protocol</code></p> <p>A C-level reference to an Arrow RecordBatchReader, Table, or ChunkedArray.</p>"}]}